JSON:
	
	JSON Array format:
		[
			value1,
			value2,
			lastVaue
		]
		
No comma @ end of last value
Sq. brackets

	JSON Obj format:
		{
			"objName1": value1,
			"objName2": value2,
			"lastObjName": value3
		}
		
	Again, no comma @ end of last value
	Curly brackets
	
	
	JSON Nested Obj format:
		{
			"objName1": [
				value1,
				value2
			],
			
			"objName2": [
				value1,
				value2,
				value3
			]
		}
		
		- basically, it's a JSON array after each obj name
		- no comma @ end of last value in each obj or @ end of last obj
		- IMPT: comma after end of each obj (after closing brackets) unless it's the last obj
		- Sq. brackets for arrays, curly brackets for obj		

		
		-IMPT: Use UTF while writing files
		
		
Iteration
	I think this just means using StringBuilder/Buffer w/ loops
	
	
asArray():
	
	given asArray([5, 2, 3], writer, 0), should get output:
		(starts w/ no indent)
		{
			5,
			2,
			3
		}
		
	Pseudocode:
		
		given collection of ints elements, Writer named writer, int called level:
		//Head - for first elem in list
		
		writer writes "{"
		writer makes newline
		writer indents
		
		writer.write(first elem)
			
		// General case:
		for int i = 1; i < elements.length - 1; i++: // starts @ 2nd item
			writer.write(",")
			writer makes newline
			writer indents
			writer.write(elements[i])
			

		// Case - tail:
		writer.write(last elem)
		writer makes newline // does not write ","
		writer.write("}")
		
Possible to do it in 2 cases:
	(After writing "{" and going to newline)
	
	Not tail (head and everything but last thing):
		writer indents
		writer.write(elem)
		writer.write(",")
		writer makes newline
		
	Tail (last entry):
		writer indents
		writer.write(elem)
		writer makes newline
		writer.write("}")
		
	asArray() psuedocode w/ only 2 cases:
		
		//Start array
		writer.write("{")
		writer makes newline
		
		//Head & all entries except tail
		for int i = 0; i < elements.length - 1; i++:
			writer indents
			writer.write(elements[i])
			writer.write(",")
			writer makes newline
			
		//Tail
		writer.write(elements[-1])
		writer makes newline
		writer.write("{")
		
Gonna make helper func - addArrayEntry(String element, int level, int addComma):
	// level = indent lvl, addComma = "boolean" for whether to add comma at end
	String commaTable = new String[] {"", ","}
	
	writer indents level times
	writer.write(element)
	writer.write(commaTable[addComma])
	writer makes newline
	
	
Note: Given func indent() already indents and writes element for us
				
	
oh that's right, JSONWriter works with collections

use head case and other cases, not tail case

asArray() pseudocode, v3:
	make Collections Iterator called it, linked to collection called elements
	
	//head
	indent("{\n", writer, 0)
	indent(it.next(), writer, 1)
	
	/**
	* head ends up looking like this:
	* {
	* 	first elem
	*/
	
	
	// other values
	while it.hasNext():
		indent(",\n", writer, 0)
		indent(it.next(), 1)
		
	/** each elem written like this:
	*
	* 	(last elem),
	*	(this elem)
	*/ 
		
	// done w/ all values - tail
	indent("\n}", writer, 0")
	
	/** tail looks like this:
	*
	*	(last elem)
	* }
	
	

writeEntry() & asObject():
	
	writeEntry():
		1. Makes newline
		2. Writes key and value as "key": value


	asObject():
		Params:
		
			Given Map<String, Integer> elements, Writer writer, int level

		
		Psuedocode:

			Iterator<String, Integer> it = elements.iterator()

			//Head
			writer.write("{")

			if (it.hasNext()):
				writeEntry(it.next())

			//Case: Other values
			while (it.hasNExt()) {
				writer.write(",")
				writeEntry(it.next())

			//Case: Tail/After all elements:
			writer.write("\n}") // Curly brackets
				
			

asNestedArray():
	Weird syntax: Map<String, ? extends Collection<Integer>>
	According to file, can basically treat as HashMap<String, HashSet<Integer>>

	Params:
		(1) Map<String, ? extends Collection<Integer>> elements (see above notes) 
		(2) Writer writer
		(3) int level

	Pseudocode:
		Entry<whatever type> entries = elements.entrySet();
		Iterator<whatever type> it = entries.iterator();

		// Same format as asObject, except the values are the collections written asArray()

		//Case: Head/start of obj
		writer.write("{");
		
		Set<Map.Entry...> entries = elements.entrySet();
		Iterator<...> it = entries.iterator();
		
		if (it.hasNext()) {
			writeEntry(it.next(), writer, level + 1);
		}
		
		//Case: Other values
		while (it.hasNext()) {
			writer.write(",");
			writeEntry(it.next(), writer, level + 1);
		}

		// Case: Tail/end of obj:
		writer.write("\n}");
	

Keeping this just in case (from asNestedArray()):
		// TODO Fill in using iteration (not replace/split/join methods).
		// TODO Optional: Avoid repeated code and hard-coding the indent level.

		/*
		 * TODO Read then delete this comment.
		 *
		 * The parameter syntax for elements looks like:
		 *
		 * Map<String, ? extends Collection<Integer>> elements
		 *
		 * The syntax above makes this method directly useful for your project.
		 * However, you may not know how to interpret this syntax yet. It behaves
		 * as if it were this instead:
		 *
		 * HashMap<String, HashSet<Integer>> elements
		 *
		 * You may want to use the "var" keyword here to make dealing with the syntax
		 * a little bit easier.
		 */